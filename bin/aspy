#!/usr/bin/env python
import logging
import os
import shelve
import sys
import traceback

import numpy as np
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

N = 20


class GenericSignal(QObject):
    signal = pyqtSignal(object)

    def __init__(self):
        super(GenericSignal, self).__init__()

    def emit_sig(self, args):
        self.signal.emit(args)


class SchemeInputer(QGraphicsScene):
    def __init__(self, n=N, length=50, *args, **kwargs):
        super(SchemeInputer, self).__init__(*args, **kwargs)
        self.n = n
        self._oneSquareSideLength = length
        self._moveHistory = np.ones((2, 2)) * -1
        self._selectorHistory = np.array([None, -1, -1])  # 0: old QRect, 1 & 2: coordinates to new QRect
        self._lastRetainer, self._firstRetainer = False, True
        self.pointerSignal = GenericSignal()
        self.methodSignal = GenericSignal()
        self.dataSignal = GenericSignal()
        self.selector_radius = length / 2
        self.setSceneRect(0, 0, self._oneSquareSideLength * self.n,
                          self._oneSquareSideLength * self.n)  # Visible portion of Scene to View
        self.quantizedInterface = self.getQuantizedInterface()
        self.showQuantizedInterface()
        self.setSceneRect(-2 * self._oneSquareSideLength, -2 * self._oneSquareSideLength,
                          self._oneSquareSideLength * (self.n + 4), self._oneSquareSideLength * (self.n + 4))


class CircuitInputer(QWidget):
    def __init__(self):
        super(CircuitInputer, self).__init__()
        self.nmax = 1
        self.op_mode = 0

        self.Scene = SchemeInputer()
        self.View = QGraphicsView(self.Scene)
        # Layout for SchemeInput
        self.SchemeInputLayout = QHBoxLayout()
        self.SchemeInputLayout.addWidget(self.View)
        self._currElementCoords = None  # Coordinates to current object being manipuled
        self._startNewTL = True
        self._lineorig = None
        self._temp = None
        self._statusMsg = GenericSignal()
        self.__calls = {0: self.add_bus,
                        1: self.add_line,
                        2: self.LayoutManager,
                        3: self.doAfterMouseRelease,
                        4: self.storeOrigAddLine}
        self.Scene.pointerSignal.signal.connect(lambda args: self.setCurrentObject(args))
        self.Scene.dataSignal.signal.connect(lambda args: self.setTemp(args))
        self.Scene.methodSignal.signal.connect(lambda args: self.methodsTrigger(args))

        # Inspectors
        self.InspectorLayout = QVBoxLayout()

        # Layout for general bus case
        self.BusLayout = QVBoxLayout()

        # Bus title
        self.BusTitle = QLabel('Bus title')
        self.BusTitle.setAlignment(Qt.AlignCenter)
        self.BusTitle.setMinimumWidth(200)

        # Bus voltage
        self.BusV_Value = QLineEdit('0.0')
        self.BusV_Value.setEnabled(False)
        self.BusV_Value.setValidator(QDoubleValidator(0.0, 100.0, 3))

        # Bus angle
        self.BusAngle_Value = QLineEdit('0.0')
        self.BusAngle_Value.setEnabled(False)

        # FormLayout to hold bus data
        self.BusDataFormLayout = QFormLayout()

        # Adding bus voltage and bus angle to bus data FormLayout
        self.BusDataFormLayout.addRow('|V| (pu)', self.BusV_Value)
        self.BusDataFormLayout.addRow('\u03b4 (\u00B0)', self.BusAngle_Value)

        # Label with 'Generation'
        self.AddGenerationLabel = QLabel('Generation')
        self.AddGenerationLabel.setAlignment(Qt.AlignCenter)

        # Button to add generation
        self.AddGenerationButton = QPushButton('+')
        self.AddGenerationButton.pressed.connect(self.add_gen)  # Bind button to make input editable

        # FormLayout to add generation section
        self.AddGenerationFormLayout = QFormLayout()
        self.AddLoadFormLayout = QFormLayout()

        # Line edit to Xd bus
        self.XdLineEdit = QLineEdit('\u221E')
        self.XdLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.XdLineEdit.setEnabled(False)

        # Line edit to input bus Pg
        self.PgInput = QLineEdit('0.0')
        self.PgInput.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.PgInput.setEnabled(False)

        # Line edit to input bus Qg
        self.QgInput = QLineEdit('0.0')
        self.QgInput.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.QgInput.setEnabled(False)

        # Check box for generation connection
        self.GenGround = QCheckBox("\u23DA")
        self.GenGround.setEnabled(False)

        # Adding Pg, Qg to add generation FormLayout
        self.AddGenerationFormLayout.addRow('x\'d (pu)', self.XdLineEdit)
        self.AddGenerationFormLayout.addRow('Q<sub>G</sub> (pu)', self.QgInput)
        self.AddGenerationFormLayout.addRow('P<sub>G</sub> (pu)', self.PgInput)
        self.AddGenerationFormLayout.addRow('Y', self.GenGround)

        # Label with 'Load'
        self.AddLoadLabel = QLabel('Load')
        self.AddLoadLabel.setAlignment(Qt.AlignCenter)

        # PushButton that binds to three different methods
        self.AddLoadButton = QPushButton('+')
        self.AddLoadButton.pressed.connect(self.add_load)

        # LineEdit with Ql, Pl
        self.QlInput = QLineEdit('0.0')
        self.QlInput.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.PlInput = QLineEdit('0.0')
        self.PlInput.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.PlInput.setEnabled(False)
        self.QlInput.setEnabled(False)

        # Check box to load ground
        self.LoadGround = QCheckBox("\u23DA")
        self.LoadGround.setEnabled(False)

        # Adding Pl and Ql to add load FormLayout
        self.AddLoadFormLayout.addRow('Q<sub>L</sub> (pu)', self.QlInput)
        self.AddLoadFormLayout.addRow('P<sub>L</sub> (pu)', self.PlInput)
        self.AddLoadFormLayout.addRow('Y', self.LoadGround)

        self.RemoveBus = QPushButton('Remove bus')
        self.RemoveBus.pressed.connect(self.remove_bus)

        self.BusLayout.addWidget(self.BusTitle)
        self.BusLayout.addLayout(self.BusDataFormLayout)
        self.BusLayout.addWidget(self.AddGenerationLabel)
        self.BusLayout.addWidget(self.AddGenerationButton)
        self.BusLayout.addLayout(self.AddGenerationFormLayout)
        self.BusLayout.addWidget(self.AddLoadLabel)
        self.BusLayout.addWidget(self.AddLoadButton)
        self.BusLayout.addLayout(self.AddLoadFormLayout)
        self.BusLayout.addWidget(self.RemoveBus)

        # Layout for input new type of line
        self.InputNewLineType = QVBoxLayout()
        self.InputNewLineTypeFormLayout = QFormLayout()

        self.ModelName = QLineEdit()
        self.ModelName.setValidator(QRegExpValidator(QRegExp("[A-Za-z]*")))
        self.RhoLineEdit = QLineEdit()
        self.RhoLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.rLineEdit = QLineEdit()
        self.rLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.d12LineEdit = QLineEdit()
        self.d12LineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.d23LineEdit = QLineEdit()
        self.d23LineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.d31LineEdit = QLineEdit()
        self.d31LineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.dLineEdit = QLineEdit()
        self.dLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))
        self.mLineEdit = QLineEdit()
        self.mLineEdit.setValidator(QIntValidator(1, 4))
        self.imaxLineEdit = QLineEdit()
        self.imaxLineEdit.setValidator(QIntValidator(1, 1000))

        self.InputNewLineTypeFormLayout.addRow('Name', self.ModelName)
        self.InputNewLineTypeFormLayout.addRow('\u03C1 (n\u03A9m)', self.RhoLineEdit)
        self.InputNewLineTypeFormLayout.addRow('r (mm)', self.rLineEdit)
        self.InputNewLineTypeFormLayout.addRow('d12 (m)', self.d12LineEdit)
        self.InputNewLineTypeFormLayout.addRow('d23 (m)', self.d23LineEdit)
        self.InputNewLineTypeFormLayout.addRow('d31 (m)', self.d31LineEdit)
        self.InputNewLineTypeFormLayout.addRow('d (m)', self.dLineEdit)
        self.InputNewLineTypeFormLayout.addRow('m', self.mLineEdit)
        self.InputNewLineTypeFormLayout.addRow('Imax (A)', self.imaxLineEdit)

        self.InputNewLineType.addStretch()
        self.InputNewLineType.addLayout(self.InputNewLineTypeFormLayout)
        self.SubmitNewLineTypePushButton = QPushButton('Submit')
        self.SubmitNewLineTypePushButton.setMinimumWidth(200)
        self.SubmitNewLineTypePushButton.pressed.connect(self.addNewLineType)
        self.InputNewLineType.addWidget(self.SubmitNewLineTypePushButton)
        self.InputNewLineType.addStretch()

        # Layout for simulation control panel
        self.ControlPanelLayout = QVBoxLayout()

        self.SimulationControlHbox = QHBoxLayout()
        self.RealTimeRadioButton = QRadioButton()
        self.RealTimeRadioButton.setChecked(True)
        self.RealTimeRadioButton.toggled.connect(lambda: self.setOperationMode(0))
        self.InsertionModeRadioButton = QRadioButton()
        self.InsertionModeRadioButton.toggled.connect(lambda: self.setOperationMode(1))
        self.SimulationControlHbox.addWidget(QLabel('INSERTION'))
        self.SimulationControlHbox.addWidget(self.InsertionModeRadioButton)
        self.SimulationControlHbox.addWidget(QLabel('REAL-TIME'))
        self.SimulationControlHbox.addWidget(self.RealTimeRadioButton)

        self.NmaxHbox = QHBoxLayout()
        self.NmaxSlider = QSlider()
        self.NmaxSlider.setMinimum(1)
        self.NmaxSlider.setMaximum(50)
        self.NmaxSlider.setOrientation(Qt.Horizontal)
        self.NmaxLabel = QLabel('Nmax: {:02d}'.format(self.nmax))
        self.NmaxSlider.valueChanged.connect(lambda: self.setNmaxValue(self.NmaxSlider.value()))
        self.NmaxHbox.addWidget(self.NmaxSlider)
        self.NmaxHbox.addWidget(self.NmaxLabel)

        self.ControlPanelLayout.addStretch()
        self.ControlPanelLayout.addLayout(self.SimulationControlHbox)
        self.ControlPanelLayout.addLayout(self.NmaxHbox)
        self.ControlPanelLayout.addStretch()

        # General Layout for TL case
        self.LineOrTranLayout = QVBoxLayout()

        self.chooseLine = QRadioButton('TL')
        self.chooseTran = QRadioButton('Transf')
        self.chooseLine.toggled.connect(self.defineLineOrTranVisibility)
        self.chooseTran.toggled.connect(self.defineLineOrTranVisibility)

        self.chooseLineOrTran = QHBoxLayout()
        self.chooseLineOrTran.addWidget(QLabel('TL/Transf:'))
        self.chooseLineOrTran.addWidget(self.chooseLine)
        self.chooseLineOrTran.addWidget(self.chooseTran)

        self.chosenLineFormLayout = QFormLayout()

        self.chooseLineModel = QComboBox()
        self.chooseLineModel.addItem('No model')

        self.EllLineEdit = QLineEdit()
        self.EllLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))

        self.VbaseLineEdit = QLineEdit()
        self.VbaseLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 3))

        self.TlRLineEdit = QLineEdit()
        self.TlRLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 5))

        self.TlXLineEdit = QLineEdit()
        self.TlXLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 5))

        self.TlYLineEdit = QLineEdit()
        self.TlYLineEdit.setValidator(QDoubleValidator(0.0, 100.0, 5))

        self.tlSubmitByImpedancePushButton = QPushButton('Submit by impedance')
        self.tlSubmitByImpedancePushButton.setMinimumWidth(200)
        self.tlSubmitByImpedancePushButton.pressed.connect(lambda: self.lineProcessing('impedance'))

        self.tlSubmitByModelPushButton = QPushButton('Submit by model')
        self.tlSubmitByModelPushButton.pressed.connect(lambda: self.lineProcessing('parameters'))
        self.tlSubmitByModelPushButton.setMinimumWidth(200)

        self.chosenLineFormLayout.addRow('Model', self.chooseLineModel)
        self.chosenLineFormLayout.addRow('\u2113 (m)', self.EllLineEdit)
        self.chosenLineFormLayout.addRow('Vbase (V)', self.VbaseLineEdit)
        self.chosenLineFormLayout.addRow('R (%pu)', self.TlRLineEdit)
        self.chosenLineFormLayout.addRow('X<sub>L</sub> (%pu)', self.TlXLineEdit)
        self.chosenLineFormLayout.addRow('Y (%pu)', self.TlYLineEdit)

        self.removeTLPushButton = QPushButton('Remove TL')
        self.removeTLPushButton.setMinimumWidth(200)
        self.removeTLPushButton.pressed.connect(self.remove_selected_line)
        """" 
        # Reason of direct button bind to self.LayoutManager: 
        #     The layout should disappear only when a line or transformer is excluded.
        #     The conversion trafo <-> line calls the method remove_selected_(line/trafo)
        """
        self.removeTLPushButton.pressed.connect(self.LayoutManager)

        self.choosedTrafoFormLayout = QFormLayout()
        self.SNomTrafoLineEdit = QLineEdit()
        self.SNomTrafoLineEdit.setValidator(QDoubleValidator(0, 10.0, 3))
        self.XZeroSeqTrafoLineEdit = QLineEdit()
        self.XZeroSeqTrafoLineEdit.setValidator(QDoubleValidator(0, 10.0, 3))
        self.XPosSeqTrafoLineEdit = QLineEdit()
        self.XPosSeqTrafoLineEdit.setValidator(QDoubleValidator(0, 10.0, 3))

        self.TrafoPrimary = QComboBox()
        self.TrafoPrimary.addItem('Y')
        self.TrafoPrimary.addItem('Y\u23DA')
        self.TrafoPrimary.addItem('\u0394')
        self.TrafoSecondary = QComboBox()
        self.TrafoSecondary.addItem('Y')
        self.TrafoSecondary.addItem('Y\u23DA')
        self.TrafoSecondary.addItem('\u0394')

        self.trafoSubmitPushButton = QPushButton('Submit trafo')
        self.trafoSubmitPushButton.pressed.connect(self.trafoProcessing)
        self.trafoSubmitPushButton.setMinimumWidth(200)

        self.removeTrafoPushButton = QPushButton('Remove trafo')
        self.removeTrafoPushButton.pressed.connect(self.remove_trafo)
        """" 
        # Reason of direct button bind to self.LayoutManager: 
        #     The layout should disappear only when a line or trafo is excluded.
        #     The conversion trafo <-> line calls the method remove_selected_(line/trafo)
        """
        self.removeTrafoPushButton.pressed.connect(self.LayoutManager)
        self.removeTrafoPushButton.setMinimumWidth(200)

        self.choosedTrafoFormLayout.addRow('Snom (VA)', self.SNomTrafoLineEdit)
        self.choosedTrafoFormLayout.addRow('x0 (%pu)', self.XZeroSeqTrafoLineEdit)
        self.choosedTrafoFormLayout.addRow('x+ (%pu)', self.XPosSeqTrafoLineEdit)
        self.choosedTrafoFormLayout.addRow('Prim.', self.TrafoPrimary)
        self.choosedTrafoFormLayout.addRow('Sec.', self.TrafoSecondary)

        self.LtOrTrafoLayout.addLayout(self.chooseLineOrTran)
        self.LtOrTrafoLayout.addLayout(self.chosenLineFormLayout)
        self.LtOrTrafoLayout.addLayout(self.choosedTrafoFormLayout)

        # Submit and remove buttons for line
        self.LtOrTrafoLayout.addWidget(self.tlSubmitByModelPushButton)
        self.LtOrTrafoLayout.addWidget(self.tlSubmitByImpedancePushButton)
        self.LtOrTrafoLayout.addWidget(self.removeTLPushButton)

        # Buttons submit and remove button for trafo
        self.LtOrTrafoLayout.addWidget(self.trafoSubmitPushButton)
        self.LtOrTrafoLayout.addWidget(self.removeTrafoPushButton)

        # Layout that holds bus inspector and Stretches
        self.InspectorAreaLayout = QVBoxLayout()
        self.InspectorLayout.addStretch()
        self.InspectorLayout.addLayout(self.BusLayout)
        self.InspectorLayout.addLayout(self.LtOrTrafoLayout)
        self.InspectorLayout.addStretch()
        self.InspectorAreaLayout.addLayout(self.InspectorLayout)

        # Toplayout
        self.TopLayout = QHBoxLayout()
        self.Spacer = QSpacerItem(200, 0, 0, 0)
        self.TopLayout.addItem(self.Spacer)
        self.TopLayout.addLayout(self.InspectorAreaLayout)
        self.TopLayout.addLayout(self.SchemeInputLayout)
        self.TopLayout.addLayout(self.InputNewLineType)
        self.TopLayout.addLayout(self.ControlPanelLayout)
        self.setLayout(self.TopLayout)

        # All layouts hidden at first moment
        self.setLayoutHidden(self.BusLayout, True)
        self.setLayoutHidden(self.LtOrTrafoLayout, True)
        self.setLayoutHidden(self.InputNewLineType, True)
        self.setLayoutHidden(self.ControlPanelLayout, True)
        self.showSpacer()


class ASPy(QMainWindow):
    def __init__(self):
        super(ASPy, self).__init__()
        self.initUI()

    def initUI(self):
        self.displayStatusMsg('Ready')

        # Actions
        newSys = QAction('Start new system', self)
        newSys.setShortcut('Ctrl+N')
        newSys.triggered.connect(self.startNewSession)

        saveAct = QAction('Save current session', self)
        saveAct.setShortcut('Ctrl+S')
        saveAct.triggered.connect(self.saveSession)

        loadAct = QAction('Load current session', self)
        loadAct.setShortcut('Ctrl+O')
        loadAct.triggered.connect(self.loadSession)

        createReport = QAction('Generate report', self)
        createReport.setShortcut('Ctrl+R')
        createReport.triggered.connect(self.report)

        addLineAct = QAction('Add line type', self)
        addLineAct.triggered.connect(self.addLineType)

        editLineAct = QAction('Edit line type', self)
        editLineAct.triggered.connect(self.editLineType)

        configure_simulation = QAction('Configure simulation', self)
        configure_simulation.triggered.connect(self.configureSimulation)

        # Central widget
        self.CircuitInputer = CircuitInputer()
        self.CircuitInputer._statusMsg.signal.connect(lambda args: self.displayStatusMsg(args))
        self.setCentralWidget(self.CircuitInputer)

        # Menu bar
        menubar = self.menuBar()

        filemenu = menubar.addMenu('&Session')
        filemenu.addAction(newSys)
        filemenu.addAction(saveAct)
        filemenu.addAction(loadAct)
        filemenu.addAction(createReport)

        linemenu = menubar.addMenu('&Lines')
        linemenu.addAction(addLineAct)
        linemenu.addAction(editLineAct)

        settings = menubar.addMenu('&Settings')
        settings.addAction(configure_simulation)

        self.setWindowTitle('ASPy')
        self.setGeometry(50, 50, 1000, 600)
        self.setMinimumWidth(1000)
        self.show()

    def displayStatusMsg(self, args):
        self.statusBar().showMessage(args, msecs=10000)

    def startNewSession(self):
        self.clear_interface()
        reset_system_state_variables()
        self.CircuitInputer.doAfterMouseRelease()

    def saveSession(self):
        try:
            sessions_dir = getSessionsDir()
            with shelve.open(os.path.join(sessions_dir, './db')) as db:
                storeData(db)
        except Exception:
            logging.error(traceback.format_exc())

    def loadSession(self):
        try:
            sessions_dir = getSessionsDir()
            with shelve.open(os.path.join(sessions_dir, './db')) as db:
                createLocalData(db)
            createSchematic(self.CircuitInputer.Scene)
        except Exception:
            logging.error(traceback.format_exc())

    def report(self):
        pass

    def addLineType(self):
        pass

    def editLineType(self):
        pass

    def configureSimulation(self):
        pass


def reset_system_state_variables():
    global BUSES, LINES, TRANSFORMERS, GRID_BUSES, BUSES_PIXMAP
    LINES, BUSES, TRANSFORMERS = [], [], []
    GRID_BUSES = np.zeros((N, N), object)
    BUSES_PIXMAP = np.zeros((N, N), object)

app = QApplication(sys.argv)
aspy = ASPy()
sys.exit(app.exec_())
